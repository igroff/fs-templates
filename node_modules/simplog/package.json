{
  "name": "simplog",
  "version": "0.1.0",
  "description": "A very simple logging module.  Because all the others are too much.\n This module relies on the node util module to provide timestamping and formatting of log messages.\n Messages are written to stdout via util.log.",
  "main": "log.js",
  "devDependencies": {
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/intimonkey/node-simplog.git"
  },
  "keywords": [
    "log",
    "node"
  ],
  "author": {
    "name": "Ian Groff"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/intimonkey/node-simplog/issues"
  },
  "homepage": "https://github.com/intimonkey/node-simplog",
  "_id": "simplog@0.1.0",
  "dist": {
    "shasum": "3e2acb6c81cef53401c72c205cefd11fe3dd1040",
    "tarball": "http://registry.npmjs.org/simplog/-/simplog-0.1.0.tgz"
  },
  "_from": "simplog@",
  "_npmVersion": "1.4.3",
  "_npmUser": {
    "name": "intimonkey",
    "email": "ian@iangroff.com"
  },
  "maintainers": [
    {
      "name": "intimonkey",
      "email": "ian@iangroff.com"
    }
  ],
  "directories": {},
  "_shasum": "3e2acb6c81cef53401c72c205cefd11fe3dd1040",
  "_resolved": "https://registry.npmjs.org/simplog/-/simplog-0.1.0.tgz",
  "readme": "# simplog\n\nThe simplest useful log module imaginable. \n\nWrites messages to stdout (as in [12 Factor\nApp] (http://www.12factor.net/logs)) using the node.js util.log and util.format\nmethods.\n\n\n#### Installation\n    npm install simplog\n\n#### Usage\nSupports error, info, warn, debug and a handy event method.  It's\nwritten in coffee script and you should be too (that was deliberate).\n\n    log.error \"this is an error\"\n    log.info  \"this is informational\"\n    log.warn  \"this is a warning\"\n    log.debug \"this is a debug message and will only show up if process.env.DEBUG or window.debug is truthy\"\n    log.event \"this will log with the type [EVENT] and will only show up if process.env.DEBUG is truthy\"\n\n#### Formatting\nIt's even possible to use string formatting with it, like:\n\n    log.info \"that %s looked like %j\", object_name, object\n\nUnder the covers it's just using node's util.format and supports what\nyou would expect.\n\n#### Output\nAs of 0.0.5 the output includes a pid as follows\n\n    22 May 22:07:44 - [15794] [ERROR] look ma, an error\n\nIf you decide you like the old way, sans pid:\n\n    22 May 22:07:44 - [ERROR] look ma, an error\n\nyou can make `process.env.NOLOGPID` truthy and it will go away.  If there's something called window in the global scope, we'll skip the PID in any output.  Reasonable?\n",
  "readmeFilename": "README.md"
}
